{
  "language": "Solidity",
  "sources": {
    "contracts/fundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./priceConvertor.sol\";\n\n/** @title This is a crowd funding contract\n  * @author Aarav Jain\n  * @notice This contract is to demo a sample funding contract\n  * @dev This implements Price Feeds as our library\n*/\ncontract FundMe {\n    using PriceConvertor for uint256;\n\n    uint256 public minimumUSD = 50;\n    \n    address[] public s_funders;\n    mapping(address => uint256) public s_addressToAmount;\n\n    address public immutable i_owner;\n\n    AggregatorV3Interface public s_pricefeed;\n    \n    constructor(address pricefeedAddress) {\n        i_owner = msg.sender;\n        s_pricefeed = AggregatorV3Interface(pricefeedAddress);\n    }\n\n    function fund() public payable {\n        \n        require(msg.value.getConversionRate(s_pricefeed) >= minimumUSD, \"Didn't pay enough USD\");\n        s_funders.push(msg.sender);\n        s_addressToAmount[msg.sender] += msg.value;\n    }\n    \n    function withdraw() public onlyOwner{\n        address[] memory funders = s_funders;\n        for(uint256 i = 0; i < funders.length; i++){\n            address funder = funders[i];\n            s_addressToAmount[funder] = 0;\n        }\n\n        s_funders = new address[](0);\n        (bool callSuccess,) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(callSuccess, \"Call Failed\");\n    }\n\n    modifier onlyOwner {\n\n        require(msg.sender == i_owner, \"Sender is not owner\");\n        _;\n    }\n}"
    },
    "contracts/priceConvertor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConvertor {\n\n    function getPrice(AggregatorV3Interface pricefeed) internal view returns(uint256) {\n        \n        (,int256 price,,,) = pricefeed.latestRoundData();\n        return uint256(price * 1e10);\n    \n    }\n\n    function getVersion(AggregatorV3Interface pricefeed) internal view returns(uint256) {\n        return pricefeed.version();\n    \n    }\n\n    function getConversionRate(uint256 _eth, AggregatorV3Interface pricefeed) internal view returns(uint256) {\n        \n        return (getPrice(pricefeed) * _eth) / 1e18 ;\n    \n    }\n} "
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}